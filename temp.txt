@startuml
skinparam BackgroundColor grey

' Styling for clarity
skinparam class {
  BackgroundColor PaleGreen
  BorderColor DarkGreen
  ArrowColor DarkSlateGray
}

skinparam interface {
  BackgroundColor LightBlue
  BorderColor DarkBlue
  ArrowColor DarkSlateGray
}

skinparam enum {
  BackgroundColor LightYellow
  BorderColor DarkGoldenRod
  ArrowColor DarkSlateGray
}

package "Client" {
skinparam BackgroundColor #AliceBluegit

  class Player {
    + username: String
    + currentRoom: String
    --
    + sendCommand(command: String)
    + requestHint()
    + requestStatus()
    + collaborate(message: String)
  }
}

package "Server" {
  class GameServer {
    + gameLogic: GameManager
    + mqttBrokerConnection: MQTTConnection
    + threadPool: ThreadPool
    --
    + handlePlayerConnect(username: String)
    + processClientRequest(username: String, topic: String, message: String)
  }

  class GameManager {
    + rooms: List<Room>
    + players: Map<String, PlayerSession>
    --
    + initializeGame()
    + movePlayer(session: PlayerSession, direction: String)
    + checkPuzzle(session: PlayerSession, solution: String): boolean
    + getHint(session: PlayerSession): String
    + getStatus(session: PlayerSession): String
    + handleCollaboration(room: String, username: String, message: String)
  }

  class PlayerSession {
    + player: Player
    + lastActivityTime: DateTime
    --
    + processCommand(command: String): String
    + getHint(): String
    + getStatus(): String
  }

  class Room {
    + name: String
    + description: String
    + puzzles: List<Puzzle>
    + items: List<Item>
    + connectedPlayers: List<String>
    --
    + describeRoom(session: PlayerSession): String
    + handleInteraction(session: PlayerSession, action: String): String
  }

  class Puzzle {
    + name: String
    + description: String
    + solution: String
    + isSolved: boolean
    --
    + attemptSolution(playerInput: String): boolean
    + getClue(): String
  }

  class Item {
    + name: String
    + description: String
    + isUsable: boolean
    --
    + use(session: PlayerSession): String
  }

  class MQTTConnection {
    + brokerAddress: String
    --
    + publish(topic: String, message: String)
    + subscribe(topic: String, callback: Function)
  }

  class ThreadPool {
    + maxThreads: Integer
    --
    + execute(task: Runnable)
  }
}

' Relationships
Player --|> MQTTConnection : uses
Player --o GameServer : interacts with
GameServer --o GameManager : uses
GameServer --o ThreadPool : manages
GameManager --* Room : manages
GameManager --* PlayerSession : manages
PlayerSession --* Player : associated with
Room --* Puzzle : contains
Room --* Item : contains
GameServer --o MQTTConnection : uses

@enduml